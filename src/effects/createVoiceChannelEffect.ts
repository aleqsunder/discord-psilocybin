import {AbstractEffect} from './abstractEffect'
import {
    ActionRowBuilder,
    ChatInputCommandInteraction,
    ModalBuilder,
    ModalSubmitInteraction,
    TextInputBuilder,
    TextInputStyle
} from 'discord.js'
import {createVoiceChannelHandler} from '../handlers/user/modals/createVoiceChannel'
import ModalSubmitError from '../errors/ModalSubmitError'

export class CreateVoiceChannelEffect extends AbstractEffect {
    removeAfterUse = true

    name = '–°–æ–∑–¥–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞'
    shortName = 'üéôÔ∏è'
    description = '–°–æ–∑–¥–∞—ë—Ç –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª, –≥–¥–µ –≤—ã ‚Äî –º–æ–¥–µ—Ä–∞—Ç–æ—Ä'

    async onEffect(interaction: ChatInputCommandInteraction): Promise<void> {
        const customId: string = crypto.randomUUID()
        const modal = new ModalBuilder()
            .setCustomId(customId)
            .setTitle('–°–æ–∑–¥–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞')

        const nameInput = new TextInputBuilder()
            .setCustomId('name')
            .setLabel('–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞')
            .setStyle(TextInputStyle.Short)
            .setRequired(true)

        modal.addComponents(
            new ActionRowBuilder<TextInputBuilder>().addComponents(nameInput)
        )

        await interaction.showModal(modal)
        const modalInteraction: ModalSubmitInteraction = await interaction.awaitModalSubmit({
            time: 3e5,
            filter: (i: ModalSubmitInteraction) =>
                i.customId === customId && i.user.id === interaction.user.id
        })

        if (!modalInteraction.isModalSubmit()) {
            throw new ModalSubmitError('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ–∑–¥–∞–ª –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª –∑–∞ 5 –º–∏–Ω—É—Ç')
        }

        await createVoiceChannelHandler(modalInteraction)
    }
}
